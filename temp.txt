import os
from flask import Flask,render_template,url_for,redirect,request,jsonify
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import select,MetaData
from flask_login import UserMixin,LoginManager,login_user,current_user,login_required,logout_user
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import InputRequired, Length, ValidationError
from flask_bcrypt import Bcrypt
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt



app = Flask(__name__,static_url_path = '/static')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SECRET_KEY'] = 'abcd'
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
metadata=MetaData()


login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

user_name = " "

@login_manager.user_loader

def load_user(user_id):
    return User.query.get(int(user_id))


class User(db.Model,UserMixin):
  id = db.Column(db.Integer,primary_key = True)
  username = db.Column(db.String(25),nullable = False,unique = True)
  password = db.Column(db.String(80),nullable = False,unique = True)
  #relation = db.relationship('Item',backref='user')
  
'''class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Float, nullable=False)
    user_id = db.Column(db.Integer,db.ForeignKey('user.id'))

    def __repr__(self):
        return f"Item('{self.name}', {self.quantity}, {self.price})"
        '''

class SignupForm(FlaskForm):
  username = StringField(validators = [InputRequired(), Length(min = 4,max = 20)], render_kw={"placeholder":"Username"})
  password = PasswordField(validators = [InputRequired(), Length(min = 4, max = 25)],render_kw = {"placeholder":"Password"})
  submit = SubmitField("Submit")

  def validate_username(self, username):
        existing_user_username = User.query.filter_by(
            username=username.data).first()
    
        if existing_user_username:
            raise ValidationError(
                'That username already exists. Please choose a different one.')

class LoginForm(FlaskForm):
    username = StringField(validators=[
                           InputRequired(), Length(min=4, max=20)], render_kw={"placeholder": "Username"})

    password = PasswordField(validators=[
                             InputRequired(), Length(min=8, max=20)], render_kw={"placeholder": "Password"})

    submit = SubmitField('Login')


with app.app_context():
  db.create_all()


@app.route("/")

def home():
  return render_template("home.html")

@app.route("/login",methods = ["GET","POST"])

def login():
  flag = False
  form = LoginForm()
  
  if form.validate_on_submit():
        global user_name
        user_name = form.username.data
        user = User.query.filter_by(username=form.username.data).first()
        if user:
            if bcrypt.check_password_hash(user.password, form.password.data):
                login_user(user)
                return redirect(url_for('dashboard'))
              
        else:
          return jsonify({'error':'Invalid Username'})
          
  return render_template("login.html",form = form,flag = flag)

@app.route("/singup",methods = ["GET","POST"])

@app.route("/signup", methods=["GET", "POST"])
def signup():
    form = SignupForm()

    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data)
        new_user = User(username=form.username.data, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()

        username = form.username.data
        table_name = username.replace(' ', '_').lower()
        table_columns = (
            db.Column('id', db.Integer, primary_key=True),
            db.Column('name', db.String(100), nullable=False),
            db.Column('quantity', db.Integer, nullable=False),
            db.Column('price', db.Integer, nullable=False),
            db.Column('user_id', db.Integer, db.ForeignKey('user.id'))
        )
        table = type(table_name, (db.Model,), {
            '__tablename__': table_name,
            '__table_args__': {'extend_existing': True},
            'id': table_columns[0],
            'name': table_columns[1],
            'quantity': table_columns[2],
            'price': table_columns[3],
            'user_id': table_columns[4]
        })
        metadata.create_all(db.engine)
        db.Model.metadata.reflect(bind=db.engine)
        db.Model.metadata.tables[table_name] = table
        db.session.add(table)  # Add the dynamically created table to the session
        db.session.commit()

        return redirect(url_for('login'))

    return render_template("signup.html", form=form)
@app.route('/logout', methods=['GET', 'POST'])

@login_required

def logout():
    logout_user()
    return redirect(url_for('home'))



@app.route('/dashboard')
def dashboard():
    table_name = db.Model.metadata.tables[user_name.replace(' ', '_').lower()]
    query = select([table_name])
    items = db.engine.execute(query)
    return render_template('dashboard.html', items=items)
@app.route('/add', methods = ['GET','POST'])

@login_required

def add():
    if request.method == 'POST':
        name = request.form['name']
        quantity = int(request.form['quantity'])
        price = float(request.form['price'])

        table_name = db.Model.metadata.tables[user_name] 
        item = table_name(name=name, quantity=quantity, price=price)
        db.session.add(item)
        db.session.commit()
        return redirect(url_for('dashboard'))
    
    return render_template('add.html')


@app.route('/drop/<int:item_id>', methods=['POST'])
@login_required
def drop(item_id):
    table_name = db.Model.metadata.tables[user_name.replace(' ', '_').lower()]
    item = table_name.query.get(item_id)
    if item is None:
        return jsonify({'error': 'Product not found'})
    db.session.delete(item)
    db.session.commit()
    return redirect(url_for('dashboard'))
@app.route('/analysis')

def analysis():
    pass
  
#version1
if __name__ == '__main__':
  app.run(debug = True,host = '0.0.0.0')
